{"flowContents":{"identifier":"14e4c92b-2839-31d4-ba4e-2cc0136f5350","name":"NiFi Flow","comments":"","position":{"x":0.0,"y":0.0},"processGroups":[],"remoteProcessGroups":[],"processors":[{"identifier":"c710911b-2d2f-3528-8bb1-c84de5b8af24","name":"ConsumeKafka","comments":"","position":{"x":504.0,"y":16.0},"bundle":{"group":"org.apache.nifi","artifact":"nifi-kafka-0-9-nar","version":"1.11.4"},"style":{},"type":"org.apache.nifi.processors.kafka.pubsub.ConsumeKafka","properties":{"security.protocol":"PLAINTEXT","ssl.context.service":null,"max.poll.records":"10000","max-uncommit-offset-wait":"1 secs","group.id":"user","bootstrap.servers":"localhost:9092","topic":"testDimRed","message-demarcator":null,"key-attribute-encoding":"utf-8","auto.offset.reset":"latest","sasl.kerberos.service.name":null},"propertyDescriptors":{"security.protocol":{"name":"security.protocol","displayName":"Security Protocol","identifiesControllerService":false,"sensitive":false},"ssl.context.service":{"name":"ssl.context.service","displayName":"SSL Context Service","identifiesControllerService":true,"sensitive":false},"max.poll.records":{"name":"max.poll.records","displayName":"Max Poll Records","identifiesControllerService":false,"sensitive":false},"max-uncommit-offset-wait":{"name":"max-uncommit-offset-wait","displayName":"Max Uncommitted Time","identifiesControllerService":false,"sensitive":false},"group.id":{"name":"group.id","displayName":"Group ID","identifiesControllerService":false,"sensitive":false},"bootstrap.servers":{"name":"bootstrap.servers","displayName":"Kafka Brokers","identifiesControllerService":false,"sensitive":false},"topic":{"name":"topic","displayName":"Topic Name(s)","identifiesControllerService":false,"sensitive":false},"message-demarcator":{"name":"message-demarcator","displayName":"Message Demarcator","identifiesControllerService":false,"sensitive":false},"key-attribute-encoding":{"name":"key-attribute-encoding","displayName":"Key Attribute Encoding","identifiesControllerService":false,"sensitive":false},"auto.offset.reset":{"name":"auto.offset.reset","displayName":"Offset Reset","identifiesControllerService":false,"sensitive":false},"sasl.kerberos.service.name":{"name":"sasl.kerberos.service.name","displayName":"Kerberos Service Name","identifiesControllerService":false,"sensitive":false}},"schedulingPeriod":"0 sec","schedulingStrategy":"TIMER_DRIVEN","executionNode":"ALL","penaltyDuration":"30 sec","yieldDuration":"1 sec","bulletinLevel":"WARN","runDurationMillis":0,"concurrentlySchedulableTaskCount":1,"autoTerminatedRelationships":[],"scheduledState":"ENABLED","componentType":"PROCESSOR","groupIdentifier":"14e4c92b-2839-31d4-ba4e-2cc0136f5350"},{"identifier":"9c23d5b7-c200-3b48-a6de-ae6b2445f7d5","name":"ExecuteScript","comments":"","position":{"x":504.0,"y":240.0},"bundle":{"group":"org.apache.nifi","artifact":"nifi-scripting-nar","version":"1.11.4"},"style":{},"type":"org.apache.nifi.processors.script.ExecuteScript","properties":{"Script File":null,"Script Engine":"python","Script Body":"import math\nimport datetime \nimport json\nfrom org.apache.commons.io import IOUtils\nfrom java.nio.charset import StandardCharsets\nfrom org.apache.nifi.processor.io import StreamCallback\n\n# Define a subclass of StreamCallback for handling incoming flow files\nclass PyStreamCallback(StreamCallback):\n    def _init_(self):\n        pass\n\n    def process(self, inputStream, outputStream):\n        try:\n            # Read the input flow file content as a string\n            input_text = IOUtils.toString(inputStream, StandardCharsets.UTF_8)\n            \n            # Parse the JSON data\n            data = json.loads(input_text)\n            \n            # Extract required variables from JSON data\n            Tmax = data[\"Tmax\"]\n            Tmin = data[\"Tmin\"]\n            Rs = data[\"Rs\"]\n            u2 = data[\"u2\"]\n            RH_max = data[\"RH_max\"]\n            RH_min = data[\"RH_min\"]\n            P = data[\"P\"]\n            cp = data[\"cp\"]\n            latent_heat_of_vaporization = data[\"latent_heat_of_vaporization\"]\n            latitude = data[\"latitude\"]\n            altitude = data[\"altitude\"]\n            albedo = data[\"albedo\"]\n            emissivity = data[\"emissivity\"]\n            G = data[\"G\"]\n\t\t\t\n            # Calculate Julian day\n            current_date = datetime.datetime.now()\n            julian_day = current_date.timetuple().tm_yday\n            \n            # Calculate mean temperature\n            Tmean = (Tmax + Tmin) / 2\n\n            # Constants for the Clausius–Clapeyron equation\n            a = 17.27\n            b = 237.7\n\n            # Temperature in Celsius\n            T = Tmean\n\n            # Saturated vapor pressure calculation\n            es = 0.6108 * math.exp((a * T) / (T + b))\n            pressure_curve = (4098 * es) / math.pow(T + 237.3, 2)\n\n            # Calculate the psychrometric constant (γ)\n            gamma = cp * P / (0.622 * latent_heat_of_vaporization)\n\n            # Calculate the Delta term (DT)\n            DT = pressure_curve / (pressure_curve + gamma * (1 + 0.34 * u2))\n\n            # Calculate mean saturation vapor pressure (es)\n            et_max = 0.6108 * math.exp((a * Tmax) / (Tmax + b))\n            et_min = 0.6108 * math.exp((a * Tmin) / (Tmin + b))\n            es = (et_max + et_min) / 2\n\n            # Calculate actual vapor pressure (ea)\n            ea = (et_min * (RH_max / 100) + et_max * (RH_min / 100)) / 2\n\n            # Calculate the inverse relative distance Earth-Sun (dr) and solar declination (delta)\n            e = 0.0167\n            M = 2 * math.pi * (julian_day - 1) / 365.0\n            E = M\n            for _ in range(10):\n                E = M + e * math.sin(E)\n            w = 2 * math.pi / 365.0\n            equation_of_time = 229.18 * (0.000075 + 0.001868 * math.cos(M) - 0.032077 * math.sin(M) - 0.014615 * math.cos(2 * M) - 0.040849 * math.sin(2 * M))\n            solar_declination = math.asin(math.sin(E) * math.sin(math.radians(23.45)))\n            dr = 1 + e * math.cos(E)\n\n            # Convert latitude (Φ) in degrees to radians\n            latitude_rad = math.radians(latitude)\n            solar_declination_rad = math.radians(solar_declination)\n            sunset_hour_angle = math.acos(-math.tan(latitude_rad) * math.tan(solar_declination_rad))\n            solar_constant = 0.0820\n            Ra = solar_constant * dr * (sunset_hour_angle * math.sin(latitude_rad) * math.sin(solar_declination) + math.cos(latitude_rad) * math.cos(solar_declination) * math.sin(sunset_hour_angle))\n            \n            # Calculate net solar radiation (Rns)\n            Rns = (1 - albedo) * Rs\n\n            # Calculate net outgoing long wave solar radiation (Rnl)\n            sigma = 5.67e-8  # W m^-2 K^-4\n            T_mean_kelvin = Tmean + 273.16\n            Rnl = sigma * emissivity * (T_mean_kelvin ** 4) * ((1 / emissivity) - 1) * 1e-9\n\n            # Calculate net radiation (Rn)\n            Rn = Rns - Rnl\n\n            # Implement the full Penman-Monteith equation\n            ET0 = (0.408 * DT * (Rn - G) + gamma * (900 / (Tmax + 273)) * u2 * (es - ea)) / (DT + gamma * (1 + 0.34 * u2))\n\n            # Add ET0 to the original data\n            data[\"ET0\"] = ET0\n            \n            # Write the output data as JSON to the output stream\n            outputStream.write(json.dumps(data).encode('utf-8'))\n        finally:\n            # Close the input and output streams\n            inputStream.close()\n            outputStream.close()\n\n# Instantiate the StreamCallback subclass\ncallback = PyStreamCallback()\n\n# Execute the callback\nflowFile = session.get()\nif flowFile is not None:\n    flowFile = session.write(flowFile, callback)\n    session.transfer(flowFile, REL_SUCCESS)\n","Module Directory":null},"propertyDescriptors":{"Script File":{"name":"Script File","displayName":"Script File","identifiesControllerService":false,"sensitive":false},"Script Engine":{"name":"Script Engine","displayName":"Script Engine","identifiesControllerService":false,"sensitive":false},"Script Body":{"name":"Script Body","displayName":"Script Body","identifiesControllerService":false,"sensitive":false},"Module Directory":{"name":"Module Directory","displayName":"Module Directory","identifiesControllerService":false,"sensitive":false}},"schedulingPeriod":"0 sec","schedulingStrategy":"TIMER_DRIVEN","executionNode":"ALL","penaltyDuration":"30 sec","yieldDuration":"1 sec","bulletinLevel":"WARN","runDurationMillis":0,"concurrentlySchedulableTaskCount":1,"autoTerminatedRelationships":[],"scheduledState":"ENABLED","componentType":"PROCESSOR","groupIdentifier":"14e4c92b-2839-31d4-ba4e-2cc0136f5350"},{"identifier":"b291d35e-3858-35f6-838d-322200e81df5","name":"PublishKafka","comments":"","position":{"x":512.0,"y":488.0},"bundle":{"group":"org.apache.nifi","artifact":"nifi-kafka-0-9-nar","version":"1.11.4"},"style":{},"type":"org.apache.nifi.processors.kafka.pubsub.PublishKafka","properties":{"compression.type":"none","ack.wait.time":"5 secs","acks":"0","bootstrap.servers":"localhost:9092","sasl.kerberos.service.name":null,"security.protocol":"PLAINTEXT","ssl.context.service":null,"max.request.size":"1 MB","kafka-key":null,"max.block.ms":"5 sec","partitioner.class":"org.apache.kafka.clients.producer.internals.DefaultPartitioner","topic":"NifiToSpark","message-demarcator":null,"key-attribute-encoding":"utf-8"},"propertyDescriptors":{"compression.type":{"name":"compression.type","displayName":"Compression Type","identifiesControllerService":false,"sensitive":false},"ack.wait.time":{"name":"ack.wait.time","displayName":"Acknowledgment Wait Time","identifiesControllerService":false,"sensitive":false},"acks":{"name":"acks","displayName":"Delivery Guarantee","identifiesControllerService":false,"sensitive":false},"bootstrap.servers":{"name":"bootstrap.servers","displayName":"Kafka Brokers","identifiesControllerService":false,"sensitive":false},"sasl.kerberos.service.name":{"name":"sasl.kerberos.service.name","displayName":"Kerberos Service Name","identifiesControllerService":false,"sensitive":false},"security.protocol":{"name":"security.protocol","displayName":"Security Protocol","identifiesControllerService":false,"sensitive":false},"ssl.context.service":{"name":"ssl.context.service","displayName":"SSL Context Service","identifiesControllerService":true,"sensitive":false},"max.request.size":{"name":"max.request.size","displayName":"Max Request Size","identifiesControllerService":false,"sensitive":false},"kafka-key":{"name":"kafka-key","displayName":"Kafka Key","identifiesControllerService":false,"sensitive":false},"max.block.ms":{"name":"max.block.ms","displayName":"Max Metadata Wait Time","identifiesControllerService":false,"sensitive":false},"partitioner.class":{"name":"partitioner.class","displayName":"Partitioner class","identifiesControllerService":false,"sensitive":false},"topic":{"name":"topic","displayName":"Topic Name","identifiesControllerService":false,"sensitive":false},"message-demarcator":{"name":"message-demarcator","displayName":"Message Demarcator","identifiesControllerService":false,"sensitive":false},"key-attribute-encoding":{"name":"key-attribute-encoding","displayName":"Key Attribute Encoding","identifiesControllerService":false,"sensitive":false}},"schedulingPeriod":"0 sec","schedulingStrategy":"TIMER_DRIVEN","executionNode":"ALL","penaltyDuration":"30 sec","yieldDuration":"1 sec","bulletinLevel":"WARN","runDurationMillis":0,"concurrentlySchedulableTaskCount":1,"autoTerminatedRelationships":["failure"],"scheduledState":"ENABLED","componentType":"PROCESSOR","groupIdentifier":"14e4c92b-2839-31d4-ba4e-2cc0136f5350"}],"inputPorts":[],"outputPorts":[],"connections":[{"identifier":"9cd356e5-f15f-379d-b834-75297b6c4307","name":"","source":{"id":"9c23d5b7-c200-3b48-a6de-ae6b2445f7d5","type":"PROCESSOR","groupId":"14e4c92b-2839-31d4-ba4e-2cc0136f5350","name":"ExecuteScript","comments":""},"destination":{"id":"db12b97a-2036-31f9-9fcd-e011b639d997","type":"FUNNEL","groupId":"14e4c92b-2839-31d4-ba4e-2cc0136f5350","name":"Funnel","comments":""},"labelIndex":1,"zIndex":0,"selectedRelationships":["failure"],"backPressureObjectThreshold":10000,"backPressureDataSizeThreshold":"1 GB","flowFileExpiration":"0 sec","prioritizers":[],"bends":[],"loadBalanceStrategy":"DO_NOT_LOAD_BALANCE","partitioningAttribute":"","loadBalanceCompression":"DO_NOT_COMPRESS","componentType":"CONNECTION","groupIdentifier":"14e4c92b-2839-31d4-ba4e-2cc0136f5350"},{"identifier":"a9816c47-7bdf-3ebc-9d43-2d2fe8e299f7","name":"","source":{"id":"c710911b-2d2f-3528-8bb1-c84de5b8af24","type":"PROCESSOR","groupId":"14e4c92b-2839-31d4-ba4e-2cc0136f5350","name":"ConsumeKafka","comments":""},"destination":{"id":"9c23d5b7-c200-3b48-a6de-ae6b2445f7d5","type":"PROCESSOR","groupId":"14e4c92b-2839-31d4-ba4e-2cc0136f5350","name":"ExecuteScript","comments":""},"labelIndex":1,"zIndex":0,"selectedRelationships":["success"],"backPressureObjectThreshold":10000,"backPressureDataSizeThreshold":"1 GB","flowFileExpiration":"0 sec","prioritizers":[],"bends":[],"loadBalanceStrategy":"DO_NOT_LOAD_BALANCE","partitioningAttribute":"","loadBalanceCompression":"DO_NOT_COMPRESS","componentType":"CONNECTION","groupIdentifier":"14e4c92b-2839-31d4-ba4e-2cc0136f5350"},{"identifier":"1e33623a-c44b-3e0c-920d-f4ea0075a73f","name":"","source":{"id":"b291d35e-3858-35f6-838d-322200e81df5","type":"PROCESSOR","groupId":"14e4c92b-2839-31d4-ba4e-2cc0136f5350","name":"PublishKafka","comments":""},"destination":{"id":"3aca3efe-a00b-37fe-ab8f-ac4c743bc045","type":"FUNNEL","groupId":"14e4c92b-2839-31d4-ba4e-2cc0136f5350","name":"Funnel","comments":""},"labelIndex":1,"zIndex":0,"selectedRelationships":["success"],"backPressureObjectThreshold":10000,"backPressureDataSizeThreshold":"1 GB","flowFileExpiration":"0 sec","prioritizers":[],"bends":[],"loadBalanceStrategy":"DO_NOT_LOAD_BALANCE","partitioningAttribute":"","loadBalanceCompression":"DO_NOT_COMPRESS","componentType":"CONNECTION","groupIdentifier":"14e4c92b-2839-31d4-ba4e-2cc0136f5350"},{"identifier":"8dd9a586-dd48-396a-a4b4-db4b6c92e906","name":"","source":{"id":"9c23d5b7-c200-3b48-a6de-ae6b2445f7d5","type":"PROCESSOR","groupId":"14e4c92b-2839-31d4-ba4e-2cc0136f5350","name":"ExecuteScript","comments":""},"destination":{"id":"b291d35e-3858-35f6-838d-322200e81df5","type":"PROCESSOR","groupId":"14e4c92b-2839-31d4-ba4e-2cc0136f5350","name":"PublishKafka","comments":""},"labelIndex":1,"zIndex":0,"selectedRelationships":["success"],"backPressureObjectThreshold":10000,"backPressureDataSizeThreshold":"1 GB","flowFileExpiration":"0 sec","prioritizers":[],"bends":[],"loadBalanceStrategy":"DO_NOT_LOAD_BALANCE","partitioningAttribute":"","loadBalanceCompression":"DO_NOT_COMPRESS","componentType":"CONNECTION","groupIdentifier":"14e4c92b-2839-31d4-ba4e-2cc0136f5350"}],"labels":[],"funnels":[{"identifier":"db12b97a-2036-31f9-9fcd-e011b639d997","position":{"x":1144.0,"y":304.0},"componentType":"FUNNEL","groupIdentifier":"14e4c92b-2839-31d4-ba4e-2cc0136f5350"},{"identifier":"3aca3efe-a00b-37fe-ab8f-ac4c743bc045","position":{"x":1176.0,"y":536.0},"componentType":"FUNNEL","groupIdentifier":"14e4c92b-2839-31d4-ba4e-2cc0136f5350"}],"controllerServices":[],"variables":{},"componentType":"PROCESS_GROUP"},"externalControllerServices":{},"parameterContexts":{},"flowEncodingVersion":"1.0"}